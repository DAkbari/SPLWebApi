{"version":3,"sources":["../../src/bin/www.js"],"names":["app","require","debug","http","port","normalizePort","process","server","parseInt","isNaN","error","bind","console","addr"],"mappings":"AAAA;;AAEA;;;;;AAIA,IAAIA,GAAG,GAAGC,OAAO,CAAjB,QAAiB,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAPA,OAAO,CAAPA,CAAZ,kBAAYA,CAAZ;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAlB,MAAkB,CAAlB;AAEA;;;;;AAIA,IAAIG,IAAI,GAAGC,aAAa,CAACC,OAAO,CAAPA,GAAAA,CAAAA,IAAAA,IAAzB,MAAwB,CAAxB;AACAN,GAAG,CAAHA,GAAAA,CAAAA,MAAAA,EAAAA,IAAAA;AAEA;;;;AAIA,IAAIO,MAAM,GAAGJ,IAAI,CAAJA,YAAAA,CAAb,GAAaA,CAAb;AAEA;;;;AAKAI,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AACAA,MAAM,CAANA,EAAAA,CAAAA,OAAAA,EAAAA,OAAAA;AACAA,MAAM,CAANA,EAAAA,CAAAA,WAAAA,EAAAA,WAAAA;AAEA;;;;AAIA,SAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,MAAIH,IAAI,GAAGI,QAAQ,CAAA,GAAA,EAAnB,EAAmB,CAAnB;;AAEA,MAAIC,KAAK,CAAT,IAAS,CAAT,EAAiB;AACf;AACA,WAAA,GAAA;AACD;;AAED,MAAIL,IAAI,IAAR,CAAA,EAAe;AACb;AACA,WAAA,IAAA;AACD;;AAED,SAAA,KAAA;AACD;AAED;;;;;AAIA,SAAA,OAAA,CAAA,KAAA,EAAwB;AACtB,MAAIM,KAAK,CAALA,OAAAA,KAAJ,QAAA,EAAgC;AAC9B,UAAA,KAAA;AACD;;AAED,MAAIC,IAAI,GAAG,OAAA,IAAA,KAAA,QAAA,GACP,UADO,IAAA,GAEP,UAPkB,IAKtB,CALsB,CAStB;;AACA,UAAQD,KAAK,CAAb,IAAA;AACE,SAAA,QAAA;AACEE,MAAAA,OAAO,CAAPA,KAAAA,CAAcD,IAAI,GAAlBC,+BAAAA;AACAN,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,CAAAA;AACA;;AACF,SAAA,YAAA;AACEM,MAAAA,OAAO,CAAPA,KAAAA,CAAcD,IAAI,GAAlBC,oBAAAA;AACAN,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,CAAAA;AACA;;AACF;AACE,YAAA,KAAA;AAVJ;AAYD;AAED;;;;;AAIA,SAAA,WAAA,GAAuB;AACrB,MAAIO,IAAI,GAAGN,MAAM,CAAjB,OAAWA,EAAX;AACA,MAAII,IAAI,GAAG,OAAA,IAAA,KAAA,QAAA,GACP,UADO,IAAA,GAEP,UAAUE,IAAI,CAFlB,IAAA;AAGAX,EAAAA,KAAK,CAAC,kBAANA,IAAK,CAALA;AACD","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = require('../app');\nvar debug = require('debug')('splwebapi:server');\nvar http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"],"file":"www.js"}